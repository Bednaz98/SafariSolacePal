{"version":3,"sources":["SafariSolaceStyleTools/colorstyle.ts","classes-interfaces/app-context.tsx","SafariSolaceStyleTools/themecontext.tsx","SafariSolaceStyleTools/basicbutton.tsx","SafariSolaceStyleTools/basicinputtext.tsx","SafariSolaceStyleTools/basictext.tsx","SafariSolaceStyleTools/pixel-spacer.tsx","components/page/problem-report.tsx","classes-interfaces/localhandler.ts","classes-interfaces/http-handler.ts","components/page/login-page.tsx","components/page/reservation-homepage.tsx","components/children/nav-bar.tsx","SafariSolaceStyleTools/basicmodal.tsx","components/children/activity-item.tsx","components/page/activity-view.tsx","components/page/all-roomSrv-view.tsx","components/page/user-roomSrv.tsx","components/loadingScreen.tsx","App.tsx"],"names":["Theme","Color","appContext","createContext","undefined","themeContext","theme","setTheme","GetColor","colorType","useContext","Text","Button","Modal","InputText","B","C","D","E","F","BasicButton","props","onPress","title","View","style","padding","color","disabled","testID","key","BasicInputText","value","onChangeText","placeholder","Error","keyboardType","editable","onChange","nativeEvent","eventCount","target","text","onContentSizeChange","contentSize","width","height","backgroundColor","TextInput","TextType","BasicText","textType","type","General","getTextStyle","Title","fontSize","Header","PixelSpacer","minHeight","minWidth","maxHeight","maxWidth","ProblemReport","useState","viewState","setViewState","selectedFile","setSelectedFile","selectFile","a","async","DocumentPicker","pickerResult","SubmissionForm","problemDescription","setProblemDescription","desc","problem","id","submittedTime","status","formData","FormData","append","JSON","parse","stringify","name","uri","mimeType","fetch","method","body","response","photoLink","headers","alert","submitReport","ThankYouDisplay","flexDirection","justifyContent","alignItems","LocalHandler","context","this","reservationData","ServerReservationData","setReservationData","serverOfferings","ServerOfferingData","setServerOfferings","returnArray","userOfferings","console","log","length","setUserOfferings","index","newContext","slice","httpHandler","dev","useURL","localHandler","devMode","axios","get","getURL","data","fullResponse","getRoomServiceRequests","serviceRequest","offerings","requestedOffering","request","post","getRoomOfferings","getReservations","setLocalReservation","setLocalOfferings","ReservationLogin","reservationID","setReservationID","firstTry","setFirstTry","setShowError","setIsLoading","HTTP","tryLoginHTTP","syncApp","setPage","TryLoginButton","ReservationHomePage","room","Date","checkIn","toDateString","toLocaleTimeString","checkOut","NavBar","navFunc","BasicModal","child","openTitle","show","setShow","styles","StyleSheet","create","modalView","margin","borderRadius","shadowColor","shadowOffset","animationType","transparent","visible","onRequestClose","flex","marginTop","ActivityItem","startTime","endTime","location","ActivityView","handler","activitiesState","setActivitiesState","useEffect","getActivities","setter","activityItems","map","ScrollView","RoomServiceOfferings","localhandle","localhandler","orders","setOrders","getLocalOfferings","FlatList","keyExtractor","item","v4","renderItem","cost","addOffer","UserRoomServiceOrder","localHandle","getUserOfferings","deleteUserOffering","LoadingScreen","ActivityIndicator","App","default","pageIndex","setPageIndex","reservation","setReservation","serverOfferingList","setServerOfferingList","userServerOffering","setUserServerOffering","initContext","availableActivities","setAvailableActivities","themeContextObject","ShowNavBar","container","Provider"],"mappings":"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","file":"static/js/app.f40688ac.chunk.js","sourcesContent":["import { useContext } from \"react\";\r\nimport { themeContext } from \"./themecontext\";\r\n\r\n\r\n\r\n\r\nexport enum Theme{\r\n    default,\r\n    other\r\n}\r\n\r\nexport enum Color{\r\n    Text,\r\n    Button,\r\n    Modal,\r\n    InputText,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F\r\n}\r\n\r\nexport default function GetColor(colorType:Color){\r\n    const context = useContext(themeContext);\r\n\r\n    switch(context.theme){\r\n        // case Theme.default:{\r\n        //     switch(colorType){\r\n        //         case Color.Text: { return ''}\r\n        //         case Color.Button: { return ''}\r\n        //         case Color.A: { return ''}\r\n        //         case Color.B: { return ''}\r\n        //         case Color.C: { return ''}\r\n        //         case Color.D: { return ''}\r\n        //         case Color.E: { return ''}\r\n        //         case Color.F: { return ''}\r\n        //         default:      { return ''}\r\n        //     }\r\n        // }\r\n        // case Theme.other:{\r\n        //     switch(colorType){\r\n        //         case Color.Text: { return ''}\r\n        //         case Color.Button: { return ''}\r\n        //         case Color.A: { return ''}\r\n        //         case Color.B: { return ''}\r\n        //         case Color.C: { return ''}\r\n        //         case Color.D: { return ''}\r\n        //         case Color.E: { return ''}\r\n        //         case Color.F: { return ''}\r\n        //         default:      { return ''}\r\n        //     }\r\n        // }\r\n        default:{\r\n            switch(colorType){\r\n                case Color.Text: { return ''}\r\n                case Color.Button: { return ''}\r\n                case Color.Modal: { return '#aaaaaa'}\r\n                case Color.InputText: { return '#aaaaaa'}\r\n                case Color.B: { return ''}\r\n                case Color.C: { return ''}\r\n                case Color.D: { return ''}\r\n                case Color.E: { return ''}\r\n                case Color.F: { return ''}\r\n                default:      { return ''}\r\n            }\r\n        }\r\n    }\r\n\r\n}","import React, { createContext, useContext } from \"react\";\r\nimport { Activity } from \"./activity\";\r\nimport Reservation from \"./Reservation\";\r\nimport { Offering, ServiceRequest } from \"./room-service\";\r\n\r\n\r\n\r\n\r\nexport interface AppContextInterface{\r\n    setPage:React.Dispatch<React.SetStateAction<number>>\r\n    reservationData:Reservation\r\n    setReservationData:React.Dispatch<React.SetStateAction<Reservation>>\r\n    serverOfferings:Offering[]\r\n    setServerOfferings:React.Dispatch<React.SetStateAction<Offering[]>>\r\n    userOfferings:Offering[]\r\n    setUserOfferings:React.Dispatch<React.SetStateAction<Offering[]>>\r\n    availableActivities:Activity[]\r\n    setAvailableActivities:React.Dispatch<React.SetStateAction<Activity[]>>\r\n}\r\n\r\n\r\n// const dummyReservation:Reservation = {\r\n//     id: \"\",\r\n//     checkIn: 0,\r\n//     checkOut: 1,\r\n//     owner: \"\",\r\n//     room: \"\"\r\n// }\r\n// const dummyOffering : Offering[]=\r\n// [{\r\n//     desc: \"pizza in bed\",\r\n//     cost: 12\r\n// }]\r\n\r\n// export const initContext: AppContextInterface = {\r\n//     reservationData: dummyReservation,\r\n//     setReservationData: () => { },\r\n//     serverOfferings: [],\r\n//     setServerOfferings: () => { },\r\n//     userOfferings: dummyOffering,\r\n//     setUserOfferings: () => { },\r\n//     availableActivities: [],\r\n//     setAvailableActivities: () => { },\r\n//     setPage:()=>{}\r\n// }\r\n\r\nexport const appContext = createContext(undefined);","import { createContext, useContext } from \"react\";\r\nimport { Theme } from \"./colorstyle\";\r\n\r\n\r\n\r\n/**this interface is used for intellisense for the 'Theme' useContext*/\r\nexport interface ThemeContextInterface{\r\n    theme:Theme\r\n    setTheme:Function\r\n}\r\n\r\nexport const themeContextObject:ThemeContextInterface = {theme:0,setTheme:()=>{}}\r\n\r\n/**This is the global 'Theme' context*/\r\nexport const themeContext = createContext(themeContextObject)","import React from \"react\";\r\nimport { Button, NativeSyntheticEvent, NativeTouchEvent, View } from \"react-native\";\r\nimport { v4 } from \"uuid\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n\r\nexport default function BasicButton(props){\r\n    const {onPress, title} = props;\r\n\r\n    return(\r\n    <View style={{padding:3 }}>\r\n        <Button onPress={props.onPress} title={ props.title} color={GetColor(Color.Button)} // << main propers here\r\n        //Extra attributes added\r\n\r\n        disabled = { props.disabled} key={ props.key} testID={props.testID}\r\n        /*this is the close of the button tag*//> \r\n    </View>)\r\n}","import React from \"react\";\r\nimport { TextInput, View } from \"react-native\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n\r\nexport default function BasicInputText(props){\r\n    const {value, onChangeText, placeholder} = props;\r\n    if(value === undefined){throw new Error('You did not pass a value into one of your input text, pass the useState read only value here')}\r\n    if(!onChangeText){throw new Error('You did not pass an onChangeText to one of your input text, pass the useState function here ')}\r\n    if(!placeholder){throw new Error('You did not put a placeholder into one of your input text, please add a default value that describes what the field will be used for')}\r\n    const keyboardType = props?.keyboardType ?? 'default';\r\n    const editable = props?.editable ?? true;\r\n    const onChange = props?.onChange ?? ( ({ nativeEvent: { eventCount, target, text} }) => {} ) ;\r\n    const onContentSizeChange = props?.onContentSizeChange ?? ( ({ nativeEvent: { contentSize: { width, height } } }) => {} );\r\n\r\n    return(\r\n    <View style={{backgroundColor:GetColor(Color.InputText), padding:3}}> \r\n        <TextInput value={value} onChangeText={onChangeText} placeholder={placeholder} \r\n        keyboardType='default' editable={editable} onChange={onChange} onContentSizeChange={onContentSizeChange}/>\r\n    </View>)\r\n}\r\n","import React from 'react'\r\nimport { View,Text } from 'react-native'\r\nimport GetColor, { Color } from './colorstyle'\r\n\r\n\r\n\r\n\r\n/** the only required prop, @attribute 'text', optionally @Attribute'textType' of type 'TextType' can be included for specifying extra styling options*/\r\nexport default function BasicText(props){\r\n    const {text} = props\r\n    if(!text){throw new Error('You did not pass a text value into one of your text')}\r\n    //This will grab from the props the type of text for styling\r\n    // is not found, it will default to general text\r\n    const textType:TextType = props?.type ?? TextType.General\r\n    return (\r\n    <View style={{padding:3}}>\r\n        <Text style={getTextStyle(textType)}>{text}</Text>\r\n    </View>)\r\n}\r\n\r\n/**The type */\r\nexport enum TextType{\r\n    Title,\r\n    Header,\r\n    General\r\n}\r\nfunction getTextStyle(textType:TextType){\r\n    switch(textType){\r\n    case TextType.Title  :  {return {color:GetColor(Color.Text), fontSize:70}}\r\n    case TextType.Header :  {return {color:GetColor(Color.Text), fontSize:50}}\r\n    // The default case should be exactly the same as the general text as an edge case\r\n    case TextType.General:  {return {color:GetColor(Color.Text), fontSize:20}}\r\n    default              :  {return {color:GetColor(Color.Text), fontSize:20}}\r\n    //=================================================================================\r\n    }\r\n}","import React from \"react\"\r\nimport { View } from \"react-native\"\r\n\r\n\r\n/**this is a component for spacing elements with absolute pixels. @attribute height, width will default to 0. others include minWidth, maxWidth, minHight, maxHight*/\r\nexport default function PixelSpacer(props){\r\n    const height = props?.height ?? 0\r\n    const width = props?.width ?? 0\r\n    const {minHeight,minWidth,maxHeight,maxWidth} = props\r\n\r\n\r\n    return(<View style={{height:height, width:width, minHeight, minWidth, maxHeight, maxWidth}}/>)\r\n}","import React, { useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicInputText from \"../../SafariSolaceStyleTools/basicinputtext\";\r\nimport BasicText, { TextType } from \"../../SafariSolaceStyleTools/basictext\";\r\nimport PixelSpacer from \"../../SafariSolaceStyleTools/pixel-spacer\";\r\nimport * as DocumentPicker from 'expo-document-picker';\r\nimport Problem from \"../../classes-interfaces/problem\";\r\n\r\n\r\n\r\n\r\n\r\nexport default function ProblemReport(){\r\n\r\n    const [viewState, setViewState] = useState(false);\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n\r\n    async function selectFile(){\r\n        const pickerResult: DocumentPicker.DocumentResult = await DocumentPicker.getDocumentAsync();\r\n        if(pickerResult.type !== 'cancel'){\r\n            setSelectedFile(pickerResult);\r\n        }\r\n    }\r\n    \r\n    async function submitReport(desc: string){\r\n\r\n        const problem: Problem = {\r\n            id: \"\",\r\n            submittedTime: 0,\r\n            desc: desc,\r\n            status: \"Unreviewed\",\r\n        }\r\n\r\n        try {\r\n            if(selectedFile){\r\n                const formData = new FormData();\r\n                formData.append('myFile', JSON.parse(JSON.stringify({\r\n                    name: selectedFile.name,\r\n                    uri: selectedFile.uri,\r\n                    type: selectedFile.mimeType\r\n                })))\r\n                const response = await fetch('http://8f75-209-159-236-212.ngrok.io/upload', {\r\n                    method: 'POST',\r\n                    body: formData,\r\n                })\r\n                problem.photoLink = await response.text();\r\n                setSelectedFile(null);\r\n            }\r\n\r\n            const response = await fetch('https://safarisolaceproblem.azurewebsites.net/api/ProblemIngestion?', {\r\n                method: 'POST',\r\n                body: JSON.stringify(problem),\r\n                headers: {\r\n                    'content-type':\"application/json\"\r\n                }\r\n            })\r\n\r\n            if(response.status === 200){\r\n                alert(\"Problem Submitted Successfully\");\r\n            } else {\r\n                alert(\"THERE WAS AN ERROR SUBMITTING PROBLEM!\")\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            // probably just ignore this and let the user think everything worked\r\n        }\r\n        setViewState(true)\r\n    }\r\n\r\n    function SubmissionForm(){\r\n        const [problemDescription, setProblemDescription] = useState('');\r\n\r\n        return(\r\n            <View>\r\n                <PixelSpacer width={400}/>\r\n                <BasicText text={\"Submit a Problem\"} textType = {TextType.Title}/>\r\n                <PixelSpacer height={5}/>\r\n                <BasicInputText  value ={problemDescription} onChangeText={setProblemDescription} placeholder={'Problem description'}/>\r\n                <PixelSpacer height={5}/>\r\n                {!selectedFile ? <BasicButton onPress={selectFile} title={'Attach Image'}/> : <BasicButton onPress={()=>{setSelectedFile(null)}} title={'Un-Attach Image'}/>}\r\n                {/* {selectedFile ?? <BasicText text={`Selected File: ${selectedFile.name}`}/>} */}\r\n                <BasicButton onPress={()=>{submitReport(problemDescription)}} title={'Submit form'} />\r\n            </View>)\r\n    }\r\n\r\n    function ThankYouDisplay(){\r\n        return(\r\n        <View>\r\n            <BasicText text={'Thank you you for lettings us know'} textType = {TextType.Title}/>\r\n            <BasicText text={'Your report has been sent to a manager for review. We hope to fix any inconvenient as soon as possible.'} textType = {TextType.Title}/>\r\n            <BasicButton title={\"Submit another problem?\"} onPress={()=>{setViewState(false)}}/>\r\n        </View>)\r\n    }\r\n\r\n    function SwitchState( ){\r\n        if(viewState){ return <ThankYouDisplay/>}\r\n        else{ return <SubmissionForm/> }\r\n    }\r\n\r\n    return(\r\n        <View style={{flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\r\n            <SwitchState/>\r\n        </View>\r\n    \r\n    )\r\n}\r\n\r\n","import { useContext } from \"react\";\r\nimport { appContext, AppContextInterface } from \"./app-context\";\r\nimport LocalHandlerInterface from \"./local-h-interface\";\r\nimport Reservation from \"./Reservation\";\r\nimport { Offering, ServiceRequest } from \"./room-service\";\r\n\r\n\r\nexport default class LocalHandler implements LocalHandlerInterface{\r\n    private context = useContext(appContext)\r\n    constructor(){}\r\n    getLocalReservation(): Reservation {\r\n        return this.context.reservationData\r\n    }\r\n    setLocalReservation(ServerReservationData: Reservation): boolean {\r\n        this.context.setReservationData(ServerReservationData);\r\n        return true;\r\n    }\r\n    getLocalOfferings(): Offering[] {\r\n        if(this.context.serverOfferings){return this.context.serverOfferings}\r\n        else return []\r\n    }\r\n    setLocalOfferings(ServerOfferingData: Offering[]): boolean {\r\n        this.context.setServerOfferings(ServerOfferingData)\r\n        return true\r\n    }\r\n\r\n    getUserOfferings(): Offering[] {\r\n        const returnArray:Offering[] = this.context.userOfferings;\r\n        console.log(\"🚀 ~ file: localhandler.ts ~ line 29 ~ LocalHandler ~ getUserOfferings ~ returnArray\", returnArray)\r\n        if(returnArray.length > 0) {return returnArray}\r\n        else return []\r\n    }\r\n    setUserOfferings(ServerOfferingData: Offering[]): boolean {\r\n        this.context.setUserOfferings(ServerOfferingData)\r\n        return true\r\n    }\r\n    deleteUserOffering(index: number): boolean {\r\n        const deleteContext: Offering[] = this.context.userOfferings\r\n        const newContext = deleteContext.slice(index, 1)\r\n        this.context.setUserOfferings(newContext)\r\n        return (true)\r\n    }\r\n\r\n}","import { useContext } from \"react\";\r\nimport { appContext } from \"./app-context\";\r\nimport LocalHandlerInterface from \"./local-h-interface\";\r\nimport LocalHandler from \"./localhandler\";\r\nimport axios from \"axios\"\r\nimport { Activity } from \"./activity\";\r\nimport Reservation from \"./Reservation\";\r\nimport { Offering, ServiceRequest } from \"./room-service\";\r\n\r\nexport interface httphandlerInterface{\r\n\r\n    /** Get all information for the user's reservation by RESERVATION id */\r\n    getReservations(id: string): Promise<Reservation>\r\n\r\n    /** See all activities which are available.\r\n     * @param id If an optional ID is supplied, the acitivities for just the user will be fetched, otherwise all activities will be fetched\r\n     */\r\n    getActivities(id?: string) : Promise< Activity | Activity[] >\r\n\r\n    /** Get all room offerings\r\n     * @param id ID of the SERVICE REQUEST. If included as an arguement, this will get offerings for only this user\r\n     */\r\n    getRoomOfferings(id? : string): Promise< Offering[] >\r\n\r\n    /** get all room service requests available \r\n     * @param id Optional: Will return only services that the user has requested\r\n    */\r\n    getRoomServiceRequests(id? : string): Promise< ServiceRequest | ServiceRequest[] >\r\n\r\n    /** Create or delete a service request for this user */\r\n    postServiceRequest(request: ServiceRequest): Promise<boolean>\r\n    cancelServiceRequest(request: ServiceRequest): Promise<any> \r\n\r\n    /** Sync front and backend by fetching backend data and updating local context */\r\n    syncApp(id:string) : Promise<boolean>\r\n}\r\n\r\nexport default class httpHandler implements httphandlerInterface{\r\n\r\n    /////////////////////////////////////////////\r\n    private useURL:string = \"http://20.124.74.192:3000\";\r\n    private devMode:boolean;\r\n    private localHandler: LocalHandlerInterface = new LocalHandler();\r\n    \r\n    /**this function returns the URL to work with, if devMod is set to false, \r\n    * it will return the production URL, if true, it will return 'http//localhost:[port]'*/\r\n    private getURL(){\r\n        if(this.devMode){ return `https://c694890a-a61f-4a7d-b7d5-10d29c28c10c.mock.pstmn.io`} //postman mock\r\n        else {return  this.useURL} \r\n    }\r\n\r\n    //constructor\r\n    constructor(dev:boolean){\r\n        this.devMode=dev;\r\n        console.log(\"🚀 ~ file: http-handler.ts ~ line 56 ~ httpHandler ~ constructor ~ this.devMode\", this.devMode)\r\n        \r\n    }\r\n    //////////////////////////////////////////////\r\n\r\n    /** get a reservation by ID */\r\n    async getReservations(id: string){\r\n        const response = await axios.get(`${this.getURL()}/reservations/:${id}`);\r\n        const data: Reservation = response.data; //doing this will not actually enforce a type. The actual response type could be different\r\n        const fullResponse = response \r\n        console.log(\"🚀 ~ file: http-handler.ts ~ line 63 ~ httpHandler ~ getReservations ~ data\", data)\r\n        console.log(\"🚀 ~ file: http-handler.ts ~ line 64 ~ httpHandler ~ getReservations ~ altData\", fullResponse)               \r\n        return data;\r\n    }\r\n\r\n    async getActivities(id?: string): Promise< Activity | Activity[] > {\r\n        let response: any\r\n        if (id) {\r\n            response = await axios.get(`${this.getURL()}/activities/:${id}`)\r\n            let data = response.data as Activity\r\n            return data\r\n        } \r\n        else {\r\n            response = await axios.get(`${this.getURL()}/activities`);\r\n            let data = response.data as Activity[] \r\n            return data\r\n        }\r\n    }\r\n\r\n    async getRoomOfferings(id? : string): Promise<Offering[]> {\r\n        if (id){\r\n            const serviceRequest = await this.getRoomServiceRequests('servicebyid')\r\n            const offerings = serviceRequest as ServiceRequest\r\n            console.log(\"🚀 ~ file: http-handler.ts ~ line 88 ~ httpHandler ~ getRoomOfferings ~ offerings\", offerings.requestedOffering)\r\n\r\n            return offerings.requestedOffering\r\n        }\r\n        else{\r\n            const response = await axios.get(`${this.getURL()}/offerings`)\r\n            const offerings = response.data as Offering[]\r\n            return offerings\r\n        } \r\n    }\r\n\r\n    async getRoomServiceRequests(id? : string): Promise< ServiceRequest | ServiceRequest[] > {\r\n        let response: any\r\n        if (id) {\r\n            response = await axios.get(`${this.getURL()}/servicerequests/:${id}`)\r\n            console.log(\"🚀 ~ file: http-handler.ts ~ line 103 ~ httpHandler ~ getRoomServiceRequests ~ response\", response)\r\n            const data = response.data as ServiceRequest; \r\n            return data;\r\n        } \r\n        else {\r\n            response = await axios.get(`${this.getURL()}/servicerequests`) \r\n            const data = response.data as ServiceRequest[]; \r\n            return data;\r\n        }\r\n    }\r\n\r\n    async postServiceRequest(request: ServiceRequest): Promise<boolean> {\r\n        try {\r\n            await axios.post(`${this.getURL()}/servicerequests`, request)\r\n            return true\r\n        }\r\n        catch {return false}   \r\n    }\r\n\r\n    async cancelServiceRequest(request: ServiceRequest): Promise<any> {\r\n        //fetcher...\r\n        await axios.post(`${this.getURL()}/servicerequests`, request)\r\n        const response = 'derp'\r\n        this.localHandler.setUserOfferings(await this.getRoomOfferings('must_be_unique'))\r\n        return (response)\r\n    }\r\n\r\n    async syncApp(id:string){\r\n        //get-n-set\r\n        this.localHandler.setLocalReservation(await this.getReservations(id))\r\n        //const reservation = await this.getReservations(id)\r\n        //const activity = await this.getActivities()\r\n        //const reservation = await this.getReservations(id)\r\n        //const roomOfferings = await this.getRoomOfferings('must_be_unique')\r\n        //console.log(\"🚀 ~ file: http-handler.ts ~ line 134 ~ httpHandler ~ syncApp ~ roomOfferings\", roomOfferings)\r\n        this.localHandler.setLocalOfferings(await this.getRoomOfferings())\r\n        this.localHandler.setUserOfferings(await this.getRoomOfferings('must_be_unique'))\r\n        //this.context.setPage(1)\r\n        //console.log('wait')\r\n        return (true)\r\n    }\r\n} \r\n\r\n\r\n// GET /reservations/:id\r\n// GET /activities\r\n// GET /activities/:id\r\n// GET /offerings => returns all available offering for room service\r\n// GET /servicerequests\r\n// GET /servicerequests/:id\r\n// POST /servicerequests => adds a new service request","import { View } from \"react-native\";\r\nimport BasicText, { TextType } from '../../SafariSolaceStyleTools/basictext'\r\nimport BasicInputText from '../../SafariSolaceStyleTools/basicinputtext'\r\nimport BasicButton from '../../SafariSolaceStyleTools/basicbutton'\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport httpHandler, { httphandlerInterface } from \"../../classes-interfaces/http-handler\";\r\nimport LoadingScreen from \"../loadingScreen\";\r\nimport { appContext, AppContextInterface } from \"../../classes-interfaces/app-context\";\r\n\r\n\r\nexport default function ReservationLogin(props){\r\n    const [reservationID, setReservationID] = useState('');\r\n    const [firstTry, setFirstTry] = useState(false);\r\n    const [showError, setShowError] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [pageIndex, setPage] = useState(0)\r\n\r\n    const HTTP:httphandlerInterface = new httpHandler(true)\r\n    const context: AppContextInterface = useContext(appContext)\r\n\r\n    //useEffect(()=>{context.setPage(1)}, [context.reservationData, context.userOfferings])\r\n    /**this should be used to check if the input reservation is valid*/\r\n    function reservationCheck(){\r\n        if(!firstTry){setFirstTry(true)};\r\n        return Boolean(reservationID.length > 0);\r\n    }\r\n    async function tryLoginHTTP(){\r\n        if(!firstTry){setFirstTry(true)}\r\n        try {\r\n            console.log(\"try login pressed\");\r\n            setShowError(false);\r\n\r\n            await HTTP.syncApp(reservationID)\r\n            context.setPage(1)\r\n\r\n            console.log(\"context reservation data in login-page is \", context.reservationData )\r\n            //Set context State Here ...\r\n            //switch page ...\r\n        } catch (error) {\r\n            console.log(\"sync app failed\",error)\r\n            setShowError(true);\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    function TryLoginButton(){\r\n        return(<BasicButton title={\"Login with Reservation\"} onPress={tryLoginHTTP}/>)\r\n    }\r\n\r\n    function InvalidWarning(){\r\n        return <> <TryLoginButton/></>\r\n        if(!firstTry){ return <> <TryLoginButton/></>}\r\n        else if(!showError && reservationCheck()){ return <><TryLoginButton/></>}\r\n        else{return <><BasicText text={\"You may have entered an invalid URL, if not please contact a manager\"}/> </>}\r\n    }\r\n\r\n    // function Display(){\r\n    //     switch(isLoading){\r\n    //         case true:{return <LoadingScreen/>}\r\n    //         case false:{\r\n    //             return (\r\n    //             <View>\r\n    //                 <BasicText text={\"Welcome To Safari SolaceStyle Resorts\"} textType ={TextType.Title}/>\r\n    //                 <BasicText text={\"Please Enter your Reservation ID\"} textType ={TextType.Header}/>\r\n    //                 <BasicInputText value = {reservationID} placeholder={\"1234\"} onChangeText={setReservationID} />\r\n    //                 <InvalidWarning />\r\n    //             </View>)\r\n    //         }\r\n\r\n    //     }\r\n    // }\r\n    return(\r\n        <View>\r\n            <BasicText text={\"Welcome To Safari SolaceStyle Resorts\"} textType ={TextType.Title}/>\r\n            <BasicText text={\"Please Enter your Reservation ID\"} textType ={TextType.Header}/>\r\n            <BasicInputText value = {reservationID} placeholder={\"1234\"} onChangeText= {setReservationID} />\r\n            <InvalidWarning />\r\n        </View>\r\n    )\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { appContext, AppContextInterface } from \"../../classes-interfaces/app-context\";\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\r\n\r\n\r\nexport default function ReservationHomePage(){\r\n\r\n    const context = useContext(appContext);\r\n    console.log(\"🚀 ~ file: reservation-homepage.tsx ~ line 9 ~ ReservationHomePage ~ context\", context)\r\n    console.log(\"🚀 ~ file: reservation-homepage.tsx ~ line 9 ~ ReservationHomePage ~ context.reservationdata ID\", context.reservationData.id)\r\n    console.log(\"🚀 ~ file: reservation-homepage.tsx ~ line 9 ~ ReservationHomePage ~ context offerings by id\", context.userOfferings)\r\n\r\n    function GetRoomName(){\r\n        //const context = useContext(appContext);\r\n        //console.log(\"🚀 ~ file: reservation-homepage.tsx ~ line 15 ~ GetRoomName ~ context\", context.reservationData.Reservation.room)\r\n        return(\r\n        <View style={{flexDirection:\"row\"}}>\r\n            <BasicText text={\"Room Name: \"}/>\r\n            <BasicText text={context.reservationData.room ?? 'N/A'}/>\r\n        </View>)\r\n    }\r\n    function GetCheckingInTime(){\r\n        //const context = useContext(appContext);\r\n        return(\r\n            <View style={{flexDirection:\"row\"}}>\r\n                <BasicText text={\"Check In Time: \"}/>\r\n                <BasicText text={(`${ (new Date(context.reservationData.checkIn ?? 'N/A')) .toDateString()} At: ${(new Date(context.reservationData.checkIn ?? 'N/A')).toLocaleTimeString() }`)}/>\r\n            </View>)\r\n    }\r\n    function GetCheckingOutTime(){\r\n        //const context = useContext(appContext);\r\n        return(\r\n            <View style={{flexDirection:\"row\"}}>\r\n                <BasicText text={\"Check Out Time: \"}/>\r\n                <BasicText text={(`${(new Date(context.reservationData.checkOut ?? 'N/A')).toDateString()} At: ${(new Date(context.reservationData.checkOut ?? \"N/A\")).toLocaleTimeString() }`)}/>\r\n            </View>)\r\n    }\r\n    function GetReservationID(){\r\n        //const context = useContext(appContext);\r\n        return(\r\n            <View style={{flexDirection:\"row\"}}>\r\n                <BasicText text={\"Reservation ID:  \"}/>\r\n                <BasicText text={(context.reservationData.id ?? 'N/A')}/>\r\n            </View>)\r\n    }\r\n\r\n    return(\r\n    <View>\r\n        <GetRoomName />\r\n        <GetReservationID/>\r\n        <GetCheckingInTime/>\r\n        <GetCheckingOutTime/>\r\n    </View>)\r\n\r\n}","import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\n\r\n\r\n\r\n\r\nexport default function NavBar(props){\r\n    const navFunc:Function = props.navFunc\r\n\r\n    return(\r\n    <View style={{flexDirection:\"row\"}}>\r\n        <BasicButton title={\"Reservation\"} onPress={()=>navFunc(1)} />\r\n        <BasicButton title={\"Your Orders\"} onPress={()=>navFunc(2)} />\r\n        <BasicButton title={\"Room Service\"} onPress={()=>navFunc(3)} />\r\n        <BasicButton title={\"Events\"} onPress={()=>navFunc(4)} />\r\n        <BasicButton title={\"Report a Problem\"} onPress={()=>navFunc(5)} />\r\n    </View>)\r\n}","import React, { useState } from \"react\";\r\nimport { Modal, View,StyleSheet, Button } from \"react-native\";\r\nimport BasicButton from \"./basicbutton\";\r\nimport BasicText from \"./basictext\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n\r\n\r\nexport default function BasicModal(props){\r\n  let child = props.child\r\n  const openTitle = props?.openTitle ?? \"null open title\"\r\n  \r\n\r\n  const [show, setShow] = useState(false);\r\n  const styles = StyleSheet.create({\r\n    modalView: {\r\n      flexDirection:\"column\",\r\n      margin: 20,\r\n      backgroundColor:GetColor(Color.Modal),\r\n      borderRadius: 20,\r\n      padding: 35,\r\n      alignItems: \"center\",\r\n      shadowColor: \"#000\",\r\n      shadowOffset: {\r\n        width: 0,\r\n        height: 0\r\n      }\r\n  }\r\n});\r\n\r\n    return(\r\n      <View>\r\n        <Modal\r\n          animationType=\"slide\"\r\n          transparent={true}\r\n          visible={show}\r\n          onRequestClose={() => {setShow(!show)}}>\r\n          <View style={ {flex: 1, justifyContent: \"center\", alignItems: \"center\", marginTop: 22, backgroundColor:GetColor(Color.Modal)} }>\r\n            <View style={styles.modalView}>\r\n\r\n              <View>\r\n                {child}\r\n              </View>\r\n              <View>\r\n                <BasicButton title={\"close\"} onPress={()=>{setShow(!show)}}/>\r\n              </View>\r\n\r\n            </View>\r\n          </View>\r\n        </Modal>\r\n\r\n        <BasicButton title={openTitle} onPress={()=>{setShow(true)}}/>\r\n\r\n      </View>)\r\n      \r\n}\r\n\r\n\r\n\r\n","import { Activity } from \"../../classes-interfaces/activity\";\r\nimport BasicModal from \"../../SafariSolaceStyleTools/basicmodal\";\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\r\n\r\nexport default function ActivityItem(props: Activity){\r\n\r\n    const {title, desc, startTime, endTime, location, status} = props;\r\n\r\n    function renderPage(){\r\n        return(<>\r\n            <BasicText text={`Title: ${title}`}/>\r\n            <BasicText text={`Description: ${desc}`}/>\r\n            <BasicText text={`Start Time: ${new Date(startTime * 1000).toDateString()} At: ${new Date(startTime * 1000).toLocaleTimeString()}`}/>\r\n            <BasicText text={`End Time: ${new Date((endTime + 604800) * 1000).toDateString()} At: ${new Date((endTime + 604800) * 1000).toLocaleTimeString()}`}/>\r\n            <BasicText text={`Location: ${location}`}/>\r\n            <BasicText text={`Status: ${status}`}/>\r\n        </>)\r\n    }\r\n\r\n    return(<>\r\n        <BasicModal child={renderPage()} openTitle={title}/>\r\n    </>)\r\n}","\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { ScrollView, View } from \"react-native\"\r\nimport { Activity } from \"../../classes-interfaces/activity\"\r\nimport httpHandler, { httphandlerInterface } from \"../../classes-interfaces/http-handler\"\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\"\r\nimport ActivityItem from \"../children/activity-item\"\r\n\r\nexport default function ActivityView(){\r\n\r\n    // const activities: Activity[] = [\r\n    //     {\"id\":\"9d3411d2-8d2c-4813-b0ba-40eed59cf3cf\",\"title\":\"Ice Cream Social\",\"desc\":\"We all scream for ice cream!\",\"startTime\":1646772927,\"endTime\":1646772927,\"location\":\"Pool\",\"status\":\"On Schedule\"},\r\n    //     {\"id\":\"27a521d4-ca4e-4906-a1a9-4ef975815e35\",\"title\":\"Burger Buffet\",\"desc\":\"Create your own burger.\",\"startTime\":1646772927,\"endTime\":1646772927,\"location\":\"Roof Top\",\"status\":\"On Schedule\"},\r\n    //     {\"id\":\"34d4b13f-e400-4a99-9640-0f4b80777909\",\"title\":\"Axe Throwing\",\"desc\":\"Come chuck some axes.\",\"startTime\":1646772927,\"endTime\":1646772927,\"location\":\"Beach\",\"status\":\"On Schedule\"}\r\n    // ]\r\n\r\n    const handler: httphandlerInterface = new httpHandler(true);\r\n\r\n    let dummyactivities: Activity[] = [];\r\n    const [activitiesState, setActivitiesState] = useState(dummyactivities)\r\n    //const response: any = handler.getActivities();\r\n    useEffect(()=>{setter()},[])\r\n\r\n    async function setter(){\r\n        const response: any = await handler.getActivities();\r\n        const activity: Activity[] = response\r\n        setActivitiesState(activity)\r\n    }\r\n\r\n    //response?.length ? activities = [...response] : activities = [response];\r\n    \r\n    const activityItems = activitiesState.map(a => <ActivityItem key={a.id} {...a}/>)\r\n\r\n    return(<View>\r\n        <BasicText text={'Available Activities'}/>\r\n\r\n        <ScrollView>\r\n                {activityItems}\r\n        </ScrollView>\r\n    </View>)\r\n}","//shows all the orders for a room\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { FlatList } from \"react-native\";\r\nimport { View } from \"react-native\";\r\nimport httpHandler from \"../../classes-interfaces/http-handler\";\r\nimport LocalHandler from \"../../classes-interfaces/localhandler\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\r\nimport v4 from \"uuid/v4\";\r\nimport { Offering } from \"../../classes-interfaces/room-service\";\r\nimport localhandler from \"../../classes-interfaces/localhandler\";\r\n\r\nexport function RoomServiceOfferings() {\r\n  const httpHandle = new httpHandler(true);\r\n  const localhandle =new localhandler()\r\n\r\n  const arr: Offering[] = []; \r\n  const [orders, setOrders] = useState(arr);\r\n\r\n  useEffect(() => {\r\n    setOrders(localhandle.getLocalOfferings());\r\n    //setOrders(testArr());\r\n  }, []);\r\n\r\n  function testArr(){\r\n    let arr1 = [];\r\n    for(let i = 0; i < 4; i++){\r\n      let obj : Offering = {\r\n        desc: \"Test Item\",\r\n        cost: 0\r\n      } \r\n      arr1.push(obj);\r\n    }\r\n    return arr1;\r\n  }\r\n\r\n  function addOffer(props) {\r\n    \r\n\r\n  }\r\n\r\n  return (\r\n    <View>\r\n      <BasicText text={\"All Room Service Offerings\"} />\r\n      <FlatList\r\n        data={orders}\r\n        keyExtractor={(item) => v4()}\r\n        renderItem={({ item }) => {\r\n          return (\r\n            <View>\r\n              <BasicText text={item.desc} />\r\n              <BasicText text={\"$\" + item.cost} />\r\n\r\n              <BasicButton onPress={addOffer(item)} title={\"Add\"} />\r\n            </View>\r\n          );\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n","///shows all the orders for a room\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { FlatList } from \"react-native\";\r\nimport { View } from \"react-native\";\r\nimport BasicButton from \"../../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText from \"../../SafariSolaceStyleTools/basictext\";\r\nimport v4 from \"uuid/v4\";\r\nimport { Offering, ServiceRequest } from \"../../classes-interfaces/room-service\";\r\nimport localhandler from \"../../classes-interfaces/localhandler\";\r\nimport httpHandler from \"../../classes-interfaces/http-handler\";\r\n\r\nexport function UserRoomServiceOrder() {\r\n    const httpHandle = new httpHandler(true);\r\n    const localHandle = new localhandler()\r\n\r\n    const userOfferings = localHandle.getUserOfferings()\r\n    console.log(\"🚀 ~ file: user-roomSrv.tsx ~ line 16 ~ UserRoomServiceOrder ~ userOfferings\", userOfferings)\r\n\r\n    const [orders, setOrders] = useState(userOfferings);\r\n\r\n  function testArr(){\r\n    let arr1 = [];\r\n    for(let i = 0; i < 4; i++){\r\n      let obj : Offering = {\r\n        desc: `\"Item Description Here\"`, \r\n        cost: 0\r\n      } \r\n      arr1.push(obj);\r\n    }\r\n    return arr1;\r\n  }\r\n\r\n  function remove(props) {\r\n    localHandle.deleteUserOffering(props);\r\n\r\n  }\r\n\r\n  return (\r\n    <View>\r\n      <BasicText text={\"Room Service Options\"} />\r\n      <FlatList\r\n        data={orders}\r\n        keyExtractor={(item) => v4()}\r\n        renderItem={({ item, index }) => {\r\n          return (\r\n            <View>\r\n              <BasicText text={item.desc ?? \"Example\"} />\r\n              <BasicText text={\"$\" + item.cost} />\r\n              <BasicButton onPress={remove(index)} title={\"Remove\"} />\r\n            </View>\r\n          );\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { ActivityIndicator, View } from \"react-native\";\r\nimport { appContext } from \"../classes-interfaces/app-context\";\r\nimport httpHandler from \"../classes-interfaces/http-handler\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\n\r\n\r\n\r\nexport default function LoadingScreen(){\r\n    //const context = useContext(appContext);\r\n    // useEffect(() => {\r\n    //   context.setPage(1)\r\n    \r\n    // //   return () => {\r\n\r\n    // //   };\r\n    // }, [context.]);\r\n    \r\n\r\n    return(\r\n        <View>\r\n            <BasicText text={'Connecting to Server'}/>\r\n            <ActivityIndicator/>\r\n        </View>\r\n    )\r\n}","\r\nimport React, { useState } from 'react';\r\nimport { StatusBar, StyleSheet, Text, View } from 'react-native';\r\nimport { appContext, AppContextInterface } from './classes-interfaces/app-context';\r\nimport ProblemReport from './components/page/problem-report';\r\nimport { Theme } from './SafariSolaceStyleTools/colorstyle';\r\nimport { themeContext, ThemeContextInterface } from './SafariSolaceStyleTools/themecontext';\r\nimport ReservationLogin from './components/page/login-page'\r\nimport ReservationHomePage from './components/page/reservation-homepage';\r\nimport NavBar from './components/children/nav-bar';\r\nimport ActivityView from './components/page/activity-view';\r\nimport Reservation from './classes-interfaces/Reservation';\r\nimport { Offering, ServiceRequest } from './classes-interfaces/room-service';\r\nimport { RoomServiceOfferings } from './components/page/all-roomSrv-view';\r\nimport { UserRoomServiceOrder } from './components/page/user-roomSrv';\r\nimport LoadingScreen from './components/loadingScreen';\r\nimport { Activity } from './classes-interfaces/activity';\r\n\r\n\r\nexport default function App() {\r\n  const [theme, setTheme] = useState(Theme.default);\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n\r\n\r\n//   // dummy values\r\n//   const dummyReservation:Reservation={\r\n//     id: '',\r\n//     checkIn: 0,\r\n//     checkOut: 0,\r\n//     owner: '',\r\n//     room: ''\r\n//   }\r\n\r\n// const dummyOffering1:Offering[] =[]\r\n//   const dummyOffering2:ServiceRequest={\r\n//     id: '',\r\n//     room: '',\r\n//     created: 0,\r\n//     status: 'Ordered',\r\n//     requestedOffering: []\r\n//   }\r\n\r\n// const dummyOffering2 : Offering[]=\r\n// [{\r\n//     desc: \"pizza in bed\",\r\n//     cost: 12\r\n// }]\r\n\r\n  const [reservation, setReservation] = useState<Reservation>();\r\n  const [serverOfferingList, setServerOfferingList] = useState<Offering[]>();\r\n  const [userServerOffering, setUserServerOffering] = useState<Offering[]>();\r\n  const [activityList, setActivityList] = useState<Activity[]>();\r\n\r\n\r\n  const initContext:AppContextInterface = {\r\n    reservationData: reservation,\r\n    setReservationData: setReservation,\r\n    serverOfferings: serverOfferingList,\r\n    setServerOfferings: setServerOfferingList,\r\n    userOfferings: userServerOffering,\r\n    setUserOfferings: setUserServerOffering,\r\n    availableActivities: activityList,\r\n    setAvailableActivities: setActivityList,\r\n    setPage:setPageIndex\r\n  }\r\n  const themeContextObject:ThemeContextInterface = {theme:theme,setTheme:setTheme}\r\n\r\n  function ShowNavBar(){\r\n    return <NavBar navFunc={setPageIndex}/>\r\n  }\r\n\r\n\r\n  function SwitchPage(){\r\n    switch(pageIndex){\r\n      case                              0:{return (<ReservationLogin setPageIndex = {setPageIndex}/>)}\r\n      case /*Home page*/                1:{return (<>< ShowNavBar/><ReservationHomePage/> </>)}\r\n      case /*All Events*/               2:{return (<>< ShowNavBar/><UserRoomServiceOrder/></> )}\r\n      case /*All Room Service*/         3:{return (<>< ShowNavBar/><RoomServiceOfferings/></> ) }\r\n      case /*All Events*/               4:{return (<>< ShowNavBar/><ActivityView/></> )}\r\n      case /*Problem Report*/           5:{return (<>< ShowNavBar/><ProblemReport/></>)} \r\n      default :                           {return <LoadingScreen/>}\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <appContext.Provider value = {initContext}>\r\n        <themeContext.Provider value = { themeContextObject }>\r\n          <SwitchPage/>\r\n        </themeContext.Provider>\r\n      </appContext.Provider>\r\n    </View>\r\n  );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#999',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"],"sourceRoot":""}